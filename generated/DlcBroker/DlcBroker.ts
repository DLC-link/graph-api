// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BurnBtcNft extends ethereum.Event {
  get params(): BurnBtcNft__Params {
    return new BurnBtcNft__Params(this);
  }
}

export class BurnBtcNft__Params {
  _event: BurnBtcNft;

  constructor(event: BurnBtcNft) {
    this._event = event;
  }

  get dlcUUID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MintBtcNft extends ethereum.Event {
  get params(): MintBtcNft__Params {
    return new MintBtcNft__Params(this);
  }
}

export class MintBtcNft__Params {
  _event: MintBtcNft;

  constructor(event: MintBtcNft) {
    this._event = event;
  }

  get dlcUUID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get btcDeposit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SetupVault extends ethereum.Event {
  get params(): SetupVault__Params {
    return new SetupVault__Params(this);
  }
}

export class SetupVault__Params {
  _event: SetupVault;

  constructor(event: SetupVault) {
    this._event = event;
  }

  get dlcUUID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get btcDeposit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get emergencyRefundTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get index(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class StatusUpdate extends ethereum.Event {
  get params(): StatusUpdate__Params {
    return new StatusUpdate__Params(this);
  }
}

export class StatusUpdate__Params {
  _event: StatusUpdate;

  constructor(event: StatusUpdate) {
    this._event = event;
  }

  get vaultid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get dlcUUID(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newStatus(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class DlcBroker__getAllVaultsForAddressResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get dlcUUID(): Bytes {
    return this[1].toBytes();
  }

  get status(): i32 {
    return this[2].toI32();
  }

  get vaultCollateral(): BigInt {
    return this[3].toBigInt();
  }

  get nftId(): BigInt {
    return this[4].toBigInt();
  }

  get owner(): Address {
    return this[5].toAddress();
  }

  get originalCreator(): Address {
    return this[6].toAddress();
  }
}

export class DlcBroker__getVaultResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get dlcUUID(): Bytes {
    return this[1].toBytes();
  }

  get status(): i32 {
    return this[2].toI32();
  }

  get vaultCollateral(): BigInt {
    return this[3].toBigInt();
  }

  get nftId(): BigInt {
    return this[4].toBigInt();
  }

  get owner(): Address {
    return this[5].toAddress();
  }

  get originalCreator(): Address {
    return this[6].toAddress();
  }
}

export class DlcBroker__getVaultByUUIDResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get dlcUUID(): Bytes {
    return this[1].toBytes();
  }

  get status(): i32 {
    return this[2].toI32();
  }

  get vaultCollateral(): BigInt {
    return this[3].toBigInt();
  }

  get nftId(): BigInt {
    return this[4].toBigInt();
  }

  get owner(): Address {
    return this[5].toAddress();
  }

  get originalCreator(): Address {
    return this[6].toAddress();
  }
}

export class DlcBroker__vaultsResult {
  value0: BigInt;
  value1: Bytes;
  value2: i32;
  value3: BigInt;
  value4: BigInt;
  value5: Address;
  value6: Address;

  constructor(
    value0: BigInt,
    value1: Bytes,
    value2: i32,
    value3: BigInt,
    value4: BigInt,
    value5: Address,
    value6: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getDlcUUID(): Bytes {
    return this.value1;
  }

  getStatus(): i32 {
    return this.value2;
  }

  getVaultCollateral(): BigInt {
    return this.value3;
  }

  getNftId(): BigInt {
    return this.value4;
  }

  getOwner(): Address {
    return this.value5;
  }

  getOriginalCreator(): Address {
    return this.value6;
  }
}

export class DlcBroker extends ethereum.SmartContract {
  static bind(address: Address): DlcBroker {
    return new DlcBroker("DlcBroker", address);
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAllVaultsForAddress(
    _addy: Address
  ): Array<DlcBroker__getAllVaultsForAddressResultValue0Struct> {
    let result = super.call(
      "getAllVaultsForAddress",
      "getAllVaultsForAddress(address):((uint256,bytes32,uint8,uint256,uint256,address,address)[])",
      [ethereum.Value.fromAddress(_addy)]
    );

    return result[0].toTupleArray<
      DlcBroker__getAllVaultsForAddressResultValue0Struct
    >();
  }

  try_getAllVaultsForAddress(
    _addy: Address
  ): ethereum.CallResult<
    Array<DlcBroker__getAllVaultsForAddressResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllVaultsForAddress",
      "getAllVaultsForAddress(address):((uint256,bytes32,uint8,uint256,uint256,address,address)[])",
      [ethereum.Value.fromAddress(_addy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        DlcBroker__getAllVaultsForAddressResultValue0Struct
      >()
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getVault(_vaultID: BigInt): DlcBroker__getVaultResultValue0Struct {
    let result = super.call(
      "getVault",
      "getVault(uint256):((uint256,bytes32,uint8,uint256,uint256,address,address))",
      [ethereum.Value.fromUnsignedBigInt(_vaultID)]
    );

    return changetype<DlcBroker__getVaultResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getVault(
    _vaultID: BigInt
  ): ethereum.CallResult<DlcBroker__getVaultResultValue0Struct> {
    let result = super.tryCall(
      "getVault",
      "getVault(uint256):((uint256,bytes32,uint8,uint256,uint256,address,address))",
      [ethereum.Value.fromUnsignedBigInt(_vaultID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DlcBroker__getVaultResultValue0Struct>(value[0].toTuple())
    );
  }

  getVaultByUUID(_uuid: Bytes): DlcBroker__getVaultByUUIDResultValue0Struct {
    let result = super.call(
      "getVaultByUUID",
      "getVaultByUUID(bytes32):((uint256,bytes32,uint8,uint256,uint256,address,address))",
      [ethereum.Value.fromFixedBytes(_uuid)]
    );

    return changetype<DlcBroker__getVaultByUUIDResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getVaultByUUID(
    _uuid: Bytes
  ): ethereum.CallResult<DlcBroker__getVaultByUUIDResultValue0Struct> {
    let result = super.tryCall(
      "getVaultByUUID",
      "getVaultByUUID(bytes32):((uint256,bytes32,uint8,uint256,uint256,address,address))",
      [ethereum.Value.fromFixedBytes(_uuid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DlcBroker__getVaultByUUIDResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  index(): BigInt {
    let result = super.call("index", "index():(uint256)", []);

    return result[0].toBigInt();
  }

  try_index(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("index", "index():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setupVault(btcDeposit: BigInt, emergencyRefundTime: BigInt): BigInt {
    let result = super.call(
      "setupVault",
      "setupVault(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(btcDeposit),
        ethereum.Value.fromUnsignedBigInt(emergencyRefundTime)
      ]
    );

    return result[0].toBigInt();
  }

  try_setupVault(
    btcDeposit: BigInt,
    emergencyRefundTime: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setupVault",
      "setupVault(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(btcDeposit),
        ethereum.Value.fromUnsignedBigInt(emergencyRefundTime)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vaultIDsByUUID(param0: Bytes): BigInt {
    let result = super.call(
      "vaultIDsByUUID",
      "vaultIDsByUUID(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_vaultIDsByUUID(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultIDsByUUID",
      "vaultIDsByUUID(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaults(param0: BigInt): DlcBroker__vaultsResult {
    let result = super.call(
      "vaults",
      "vaults(uint256):(uint256,bytes32,uint8,uint256,uint256,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DlcBroker__vaultsResult(
      result[0].toBigInt(),
      result[1].toBytes(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toAddress()
    );
  }

  try_vaults(param0: BigInt): ethereum.CallResult<DlcBroker__vaultsResult> {
    let result = super.tryCall(
      "vaults",
      "vaults(uint256):(uint256,bytes32,uint8,uint256,uint256,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DlcBroker__vaultsResult(
        value[0].toBigInt(),
        value[1].toBytes(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toAddress()
      )
    );
  }

  vaultsPerAddress(param0: Address): BigInt {
    let result = super.call(
      "vaultsPerAddress",
      "vaultsPerAddress(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_vaultsPerAddress(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultsPerAddress",
      "vaultsPerAddress(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _dlcManagerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _dlcNftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _dlcBTCAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloseVaultCall extends ethereum.Call {
  get inputs(): CloseVaultCall__Inputs {
    return new CloseVaultCall__Inputs(this);
  }

  get outputs(): CloseVaultCall__Outputs {
    return new CloseVaultCall__Outputs(this);
  }
}

export class CloseVaultCall__Inputs {
  _call: CloseVaultCall;

  constructor(call: CloseVaultCall) {
    this._call = call;
  }

  get _vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseVaultCall__Outputs {
  _call: CloseVaultCall;

  constructor(call: CloseVaultCall) {
    this._call = call;
  }
}

export class GetBtcPriceCallbackCall extends ethereum.Call {
  get inputs(): GetBtcPriceCallbackCall__Inputs {
    return new GetBtcPriceCallbackCall__Inputs(this);
  }

  get outputs(): GetBtcPriceCallbackCall__Outputs {
    return new GetBtcPriceCallbackCall__Outputs(this);
  }
}

export class GetBtcPriceCallbackCall__Inputs {
  _call: GetBtcPriceCallbackCall;

  constructor(call: GetBtcPriceCallbackCall) {
    this._call = call;
  }

  get uuid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class GetBtcPriceCallbackCall__Outputs {
  _call: GetBtcPriceCallbackCall;

  constructor(call: GetBtcPriceCallbackCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class PostCloseDLCHandlerCall extends ethereum.Call {
  get inputs(): PostCloseDLCHandlerCall__Inputs {
    return new PostCloseDLCHandlerCall__Inputs(this);
  }

  get outputs(): PostCloseDLCHandlerCall__Outputs {
    return new PostCloseDLCHandlerCall__Outputs(this);
  }
}

export class PostCloseDLCHandlerCall__Inputs {
  _call: PostCloseDLCHandlerCall;

  constructor(call: PostCloseDLCHandlerCall) {
    this._call = call;
  }

  get _uuid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PostCloseDLCHandlerCall__Outputs {
  _call: PostCloseDLCHandlerCall;

  constructor(call: PostCloseDLCHandlerCall) {
    this._call = call;
  }
}

export class PostCreateDLCHandlerCall extends ethereum.Call {
  get inputs(): PostCreateDLCHandlerCall__Inputs {
    return new PostCreateDLCHandlerCall__Inputs(this);
  }

  get outputs(): PostCreateDLCHandlerCall__Outputs {
    return new PostCreateDLCHandlerCall__Outputs(this);
  }
}

export class PostCreateDLCHandlerCall__Inputs {
  _call: PostCreateDLCHandlerCall;

  constructor(call: PostCreateDLCHandlerCall) {
    this._call = call;
  }

  get _uuid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PostCreateDLCHandlerCall__Outputs {
  _call: PostCreateDLCHandlerCall;

  constructor(call: PostCreateDLCHandlerCall) {
    this._call = call;
  }
}

export class PostMintBtcNftCall extends ethereum.Call {
  get inputs(): PostMintBtcNftCall__Inputs {
    return new PostMintBtcNftCall__Inputs(this);
  }

  get outputs(): PostMintBtcNftCall__Outputs {
    return new PostMintBtcNftCall__Outputs(this);
  }
}

export class PostMintBtcNftCall__Inputs {
  _call: PostMintBtcNftCall;

  constructor(call: PostMintBtcNftCall) {
    this._call = call;
  }

  get _uuid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _nftId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PostMintBtcNftCall__Outputs {
  _call: PostMintBtcNftCall;

  constructor(call: PostMintBtcNftCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetStatusFundedCall extends ethereum.Call {
  get inputs(): SetStatusFundedCall__Inputs {
    return new SetStatusFundedCall__Inputs(this);
  }

  get outputs(): SetStatusFundedCall__Outputs {
    return new SetStatusFundedCall__Outputs(this);
  }
}

export class SetStatusFundedCall__Inputs {
  _call: SetStatusFundedCall;

  constructor(call: SetStatusFundedCall) {
    this._call = call;
  }

  get _uuid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetStatusFundedCall__Outputs {
  _call: SetStatusFundedCall;

  constructor(call: SetStatusFundedCall) {
    this._call = call;
  }
}

export class SetupVaultCall extends ethereum.Call {
  get inputs(): SetupVaultCall__Inputs {
    return new SetupVaultCall__Inputs(this);
  }

  get outputs(): SetupVaultCall__Outputs {
    return new SetupVaultCall__Outputs(this);
  }
}

export class SetupVaultCall__Inputs {
  _call: SetupVaultCall;

  constructor(call: SetupVaultCall) {
    this._call = call;
  }

  get btcDeposit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get emergencyRefundTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetupVaultCall__Outputs {
  _call: SetupVaultCall;

  constructor(call: SetupVaultCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
