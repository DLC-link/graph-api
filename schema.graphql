type BTCPriceFetching @entity(immutable: true) {
  id: Bytes!
  uuid: Bytes! # bytes32
  caller: Bytes! # address
  price: BigInt! # int256
  eventSource: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CloseDLC @entity(immutable: true) {
  id: Bytes!
  uuid: Bytes! # bytes32
  outcome: BigInt! # uint256
  creator: Bytes! # address
  eventSource: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CreateDLC @entity(immutable: true) {
  id: Bytes!
  uuid: Bytes! # bytes32
  creator: Bytes! # address
  receiver: Bytes! # address
  emergencyRefundTime: BigInt! # uint256
  nonce: BigInt! # uint256
  eventSource: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MintBtcNft @entity(immutable: true) {
  id: Bytes!
  dlcUUID: Bytes! # bytes32
  creator: Bytes! # address
  receiver: Bytes! # address
  btcDeposit: BigInt! # uint256
  eventSource: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PostCloseDLC @entity(immutable: true) {
  id: Bytes!
  uuid: Bytes! # bytes32
  outcome: BigInt! # uint256
  actualClosingTime: BigInt! # uint256
  eventSource: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PostCreateDLC @entity(immutable: true) {
  id: Bytes!
  uuid: Bytes! # bytes32
  creator: Bytes! # address
  receiver: Bytes! # address
  emergencyRefundTime: BigInt! # uint256
  nonce: BigInt! # uint256
  eventSource: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PostMintBtcNft @entity(immutable: true) {
  id: Bytes!
  uuid: Bytes! # bytes32
  nftId: BigInt! # uint256
  eventSource: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetStatusFunded @entity(immutable: true) {
  id: Bytes!
  uuid: Bytes! # bytes32
  eventSource: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
